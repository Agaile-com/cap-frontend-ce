{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivo/Development/cap-frontend-community/lib/chatApi.ts"],"sourcesContent":["import { Client, ThreadState } from \"@langchain/langgraph-sdk\";\nimport { LangChainMessage } from \"@assistant-ui/react-langgraph\";\n\nconst createClient = () => {\n  const apiUrl =\n    process.env[\"NEXT_PUBLIC_LANGGRAPH_API_URL\"] ||\n    new URL(\"/api\", window.location.href).href;\n  return new Client({\n    apiUrl,\n  });\n};\n\nexport const createThread = async () => {\n  const client = createClient();\n  return client.threads.create();\n};\n\nexport const getThreadState = async (\n  threadId: string\n): Promise<ThreadState> => {\n  const client = createClient();\n  return client.threads.getState(threadId);\n};\n\nexport const sendMessage = async (params: {\n  threadId: string;\n  messages: LangChainMessage[];\n}) => {\n  const client = createClient();\n  return client.runs.stream(\n    params.threadId,\n    process.env[\"NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID\"]!,\n    {\n      input: {\n        messages: params.messages,\n      },\n      streamMode: \"messages\",\n    }\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;AAAA;;AAGA,MAAM,eAAe;IACnB,MAAM,SACJ,QAAQ,GAAG,CAAC,gCAAgC,IAC5C,IAAI,IAAI,QAAQ,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI;IAC5C,OAAO,IAAI,iKAAA,CAAA,SAAM,CAAC;QAChB;IACF;AACF;AAEO,MAAM,eAAe;IAC1B,MAAM,SAAS;IACf,OAAO,OAAO,OAAO,CAAC,MAAM;AAC9B;AAEO,MAAM,iBAAiB,OAC5B;IAEA,MAAM,SAAS;IACf,OAAO,OAAO,OAAO,CAAC,QAAQ,CAAC;AACjC;AAEO,MAAM,cAAc,OAAO;IAIhC,MAAM,SAAS;IACf,OAAO,OAAO,IAAI,CAAC,MAAM,CACvB,OAAO,QAAQ,4EAEf;QACE,OAAO;YACL,UAAU,OAAO,QAAQ;QAC3B;QACA,YAAY;IACd;AAEJ"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivo/Development/cap-frontend-community/components/MyAssistant.tsx"],"sourcesContent":["\"use client\";\n\nimport { useRef } from \"react\";\nimport { AssistantModal, Thread } from \"@assistant-ui/react\";\nimport { useLangGraphRuntime, LangChainMessage } from \"@assistant-ui/react-langgraph\";\nimport { makeMarkdownText } from \"@assistant-ui/react-markdown\";\n\nimport { createThread, getThreadState, sendMessage } from \"../lib/chatApi\";\n\nconst MarkdownText = makeMarkdownText();\n\nexport function MyAssistantModal() {\n  const threadIdRef = useRef<string | undefined>();\n  const runtime = useLangGraphRuntime({\n    threadId: threadIdRef.current,\n    stream: async (messages) => {\n      if (!threadIdRef.current) {\n        const { thread_id } = await createThread();\n        threadIdRef.current = thread_id;\n      }\n      const threadId = threadIdRef.current;\n      return sendMessage({\n        threadId,\n        messages,\n      });\n    },\n    onSwitchToNewThread: async () => {\n      const { thread_id } = await createThread();\n      threadIdRef.current = thread_id;\n    },\n    onSwitchToThread: async (threadId) => {\n      const state = await getThreadState(threadId);\n      threadIdRef.current = threadId;\n      return { messages: (state.values as { messages: LangChainMessage[] }).messages };\n    },\n  });\n\n  return (\n    <AssistantModal\n      runtime={runtime}\n      assistantMessage={{ components: { Text: MarkdownText } }}\n    />\n  );\n}\n\nexport function MyAssistant() {\n  const threadIdRef = useRef<string | undefined>();\n  const runtime = useLangGraphRuntime({\n    threadId: threadIdRef.current,\n    stream: async (messages) => {\n      if (!threadIdRef.current) {\n        const { thread_id } = await createThread();\n        threadIdRef.current = thread_id;\n      }\n      const threadId = threadIdRef.current;\n      return sendMessage({\n        threadId,\n        messages,\n      });\n    },\n    onSwitchToNewThread: async () => {\n      const { thread_id } = await createThread();\n      threadIdRef.current = thread_id;\n    },\n    onSwitchToThread: async (threadId) => {\n      const state = await getThreadState(threadId);\n      threadIdRef.current = threadId;\n      return { messages: (state.values as { messages: LangChainMessage[] }).messages };\n    },\n  });\n\n  return (\n    <Thread\n      runtime={runtime}\n      assistantMessage={{ components: { Text: MarkdownText } }}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAKA;AAFA;AADA;AADA;AAAA;AAHA;;;;;;;AASA,MAAM,eAAe,CAAA,GAAA,yLAAA,CAAA,mBAAgB,AAAD;AAE7B,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD;IACzB,MAAM,UAAU,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClC,UAAU,YAAY,OAAO;QAC7B,QAAQ,OAAO;YACb,IAAI,CAAC,YAAY,OAAO,EAAE;gBACxB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,8GAAA,CAAA,eAAY,AAAD;gBACvC,YAAY,OAAO,GAAG;YACxB;YACA,MAAM,WAAW,YAAY,OAAO;YACpC,OAAO,CAAA,GAAA,8GAAA,CAAA,cAAW,AAAD,EAAE;gBACjB;gBACA;YACF;QACF;QACA,qBAAqB;YACnB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,8GAAA,CAAA,eAAY,AAAD;YACvC,YAAY,OAAO,GAAG;QACxB;QACA,kBAAkB,OAAO;YACvB,MAAM,QAAQ,MAAM,CAAA,GAAA,8GAAA,CAAA,iBAAc,AAAD,EAAE;YACnC,YAAY,OAAO,GAAG;YACtB,OAAO;gBAAE,UAAU,AAAC,MAAM,MAAM,CAAsC,QAAQ;YAAC;QACjF;IACF;IAEA,qBACE,8OAAC,4NAAA,CAAA,iBAAc;QACb,SAAS;QACT,kBAAkB;YAAE,YAAY;gBAAE,MAAM;YAAa;QAAE;;;;;;AAG7D;AAEO,SAAS;IACd,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD;IACzB,MAAM,UAAU,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClC,UAAU,YAAY,OAAO;QAC7B,QAAQ,OAAO;YACb,IAAI,CAAC,YAAY,OAAO,EAAE;gBACxB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,8GAAA,CAAA,eAAY,AAAD;gBACvC,YAAY,OAAO,GAAG;YACxB;YACA,MAAM,WAAW,YAAY,OAAO;YACpC,OAAO,CAAA,GAAA,8GAAA,CAAA,cAAW,AAAD,EAAE;gBACjB;gBACA;YACF;QACF;QACA,qBAAqB;YACnB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,8GAAA,CAAA,eAAY,AAAD;YACvC,YAAY,OAAO,GAAG;QACxB;QACA,kBAAkB,OAAO;YACvB,MAAM,QAAQ,MAAM,CAAA,GAAA,8GAAA,CAAA,iBAAc,AAAD,EAAE;YACnC,YAAY,OAAO,GAAG;YACtB,OAAO;gBAAE,UAAU,AAAC,MAAM,MAAM,CAAsC,QAAQ;YAAC;QACjF;IACF;IAEA,qBACE,8OAAC,wMAAA,CAAA,SAAM;QACL,SAAS;QACT,kBAAkB;YAAE,YAAY;gBAAE,MAAM;YAAa;QAAE;;;;;;AAG7D"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}