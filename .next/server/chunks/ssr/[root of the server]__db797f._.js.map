{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivo/Development/cap-frontend-v2/lib/chatApi.ts"],"sourcesContent":["import { Client, ThreadState } from \"@langchain/langgraph-sdk\";\nimport { LangChainMessage } from \"@assistant-ui/react-langgraph\";\n\nconst createClient = () => {\n  const apiUrl =\n    process.env[\"NEXT_PUBLIC_LANGGRAPH_API_URL\"] ||\n    new URL(\"/api\", window.location.href).href;\n  return new Client({\n    apiUrl,\n  });\n};\n\nexport const createThread = async () => {\n  const client = createClient();\n  return client.threads.create();\n};\n\nexport const getThreadState = async (\n  threadId: string\n): Promise<ThreadState> => {\n  const client = createClient();\n  return client.threads.getState(threadId);\n};\n\nexport const sendMessage = async (params: {\n  threadId: string;\n  messages: LangChainMessage[];\n}) => {\n  const client = createClient();\n  return client.runs.stream(\n    params.threadId,\n    process.env[\"NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID\"]!,\n    {\n      input: {\n        messages: params.messages.slice(-1),\n      },\n      streamMode: \"messages\",\n    }\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;AAAA;;AAGA,MAAM,eAAe;IACnB,MAAM,SACJ,QAAQ,GAAG,CAAC,gCAAgC,IAC5C,IAAI,IAAI,QAAQ,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI;IAC5C,OAAO,IAAI,iKAAA,CAAA,SAAM,CAAC;QAChB;IACF;AACF;AAEO,MAAM,eAAe;IAC1B,MAAM,SAAS;IACf,OAAO,OAAO,OAAO,CAAC,MAAM;AAC9B;AAEO,MAAM,iBAAiB,OAC5B;IAEA,MAAM,SAAS;IACf,OAAO,OAAO,OAAO,CAAC,QAAQ,CAAC;AACjC;AAEO,MAAM,cAAc,OAAO;IAIhC,MAAM,SAAS;IACf,OAAO,OAAO,IAAI,CAAC,MAAM,CACvB,OAAO,QAAQ,4EAEf;QACE,OAAO;YACL,UAAU,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnC;QACA,YAAY;IACd;AAEJ"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivo/Development/cap-frontend-v2/components/MyAssistant.tsx"],"sourcesContent":["\"use client\";\n\nimport { useRef, useState } from \"react\";\nimport { Thread, ThreadWelcome, useMessage, AssistantMessage, UserMessage, EditComposer, Composer, ThreadPrimitive, AssistantModal, AssistantModalPrimitive } from \"@assistant-ui/react\";\nimport { useLangGraphRuntime } from \"@assistant-ui/react-langgraph\";\nimport { makeMarkdownText } from \"@assistant-ui/react-markdown\";\n\nimport { BotIcon, ChevronDownIcon } from \"lucide-react\";\n\n\nimport classNames from \"classnames\";\nimport { createThread, getThreadState, sendMessage } from \"../lib/chatApi\";\n\nconst MarkdownText = makeMarkdownText(\n  {\n    components: {\n      // Make links open in a new tab instead of default behavior\n      a: ({ node, className, ...props }) => (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" className={classNames(\"aui-md-a\", className)} {...props} />\n      )\n    },\n  }\n);\n\nconst AgaileLogo = () => <a\n  href=\"https://agaile.ai\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n  className=\"text-muted-foreground flex w-full items-center justify-center gap-2 border-t py-2 text-xs\"\n>\n  <span style={{ padding: \"0px\", margin: \"0px\" }}>\n    Built by{\" \"}\n    <b style={{ padding: \"0px\", margin: \"0px\" }}>\n      <span style={{ padding: \"0px\", margin: \"0px\" }}>\n        AG\n        <span style={{ padding: \"0px\", margin: \"0px\", color: \"#6A5BCD\" }}>\n          AI\n        </span>\n        LE\n      </span>\n    </b>\n  </span>\n</a>\n\nconst MyThread = () => {\n  // Refer to the following docs for more information on custom structure:\n  // https://www.assistant-ui.com/docs/ui/styled/Decomposition\n  return (\n    <Thread.Root\n      className=\"flex flex-col\"\n    >\n      <Thread.Viewport>\n        <ThreadWelcome />\n        <Thread.Messages />\n        <Thread.FollowupSuggestions />\n        <Thread.ViewportFooter>\n          <Thread.ScrollToBottom />\n          <Composer />\n        </Thread.ViewportFooter>\n      </Thread.Viewport>\n      <AgaileLogo />\n    </Thread.Root>\n  );\n};\n\nconst MyAssistantModalTrigger = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  function Bot(props: { \n    'data-state'?: boolean;\n    className?: string;\n  }) {\n    const [hovered, setHovered] = useState(false);\n\n    return (\n      <div {...props}>  {/* Pass through any additional props */}\n        <img\n          src={hovered ? '/bot_highlighted.png' : '/bot.png'}\n          alt=\"Bot example\"\n          style={{\n            width: '150px',\n            animation: 'bob 2s infinite',\n            transition: 'all 0.2s ease',\n          }}\n          onMouseEnter={() => setHovered(true)}\n          onMouseLeave={() => setHovered(false)}\n        />\n        <style>\n          {`\n            @keyframes bob {\n              0%, 100% {\n                transform: translateY(0);\n              }\n              50% {\n                transform: translateY(-10px);\n              }\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n\n  function BotButton({ \n    setIsOpen, \n    className \n  }: { \n    setIsOpen: (value: boolean) => void;\n    className?: string;\n  }) {\n    return <button \n      onClick={() => { \n        setIsOpen(true); \n        window.parent.postMessage('chat-open', '*'); \n      }}\n      className={className}\n    >\n      <Bot data-state={true} className=\"aui-modal-button-closed-icon\" />\n    </button>\n  }\n\n  return (\n    <div>\n      <AssistantModal.Anchor>\n        <AssistantModalPrimitive.Trigger asChild>\n          <div style={{ position: \"absolute\", right: \"0px\", bottom: \"0px\" }}>\n            <div\n              className={`transition-transform transform ${isOpen ? \"translate-y-0 scale-100\" : \"translate-y-2 scale-85\"\n                } duration-300`}\n            >\n              {isOpen ? (\n                <button\n                  onClick={() => {\n                    setIsOpen(false);\n                    // Send message to parent window to close the chat\n                    window.parent.postMessage('chat-close', '*');\n                  }}\n                  className=\"bg-black text-white rounded-full p-3 flex items-center justify-center transition-transform duration-300\"\n                >\n                  <ChevronDownIcon className=\"h-6 w-6\" />\n                </button>\n              ) : (\n                <BotButton\n                  setIsOpen={setIsOpen}\n                  className=\"transition-transform duration-300\"\n                />\n              )}\n            </div>\n          </div>\n        </AssistantModalPrimitive.Trigger>\n      </AssistantModal.Anchor>\n    </div>\n  );\n};\n\nconst Modal = (config) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <AssistantModal.Root config={config}>\n      <MyAssistantModalTrigger />\n      <AssistantModal.Content\n        className={`transition-all duration-300 ${\n          isExpanded ? \"w-[600px] h-[800px] p-6\" : \"w-[400px] h-[500px] p-3\"\n        }`}\n      >\n        {/* Expand/Contract Button */}\n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"absolute top-2 left-2 bg-gray-300 rounded-full p-1 hover:bg-gray-400 transition-colors\"\n          title={isExpanded ? \"Shrink\" : \"Expand\"}\n        >\n          {isExpanded ? \"➖\" : \"➕\"}\n        </button>\n\n        <MyThread />\n      </AssistantModal.Content>\n    </AssistantModal.Root>\n  );\n};\n\nexport const MyAssistantModal = () => {\n  const threadIdRef = useRef<string | undefined>();\n  const runtime = useLangGraphRuntime({\n    threadId: threadIdRef.current,\n    stream: async (messages) => {\n      if (!threadIdRef.current) {\n        const { thread_id } = await createThread();\n        threadIdRef.current = thread_id;\n      }\n      const threadId = threadIdRef.current;\n      return sendMessage({\n        threadId,\n        messages,\n      });\n    },\n    onSwitchToNewThread: async () => {\n      const { thread_id } = await createThread();\n      threadIdRef.current = thread_id;\n    },\n    onSwitchToThread: async (threadId) => {\n      const state = await getThreadState(threadId);\n      threadIdRef.current = threadId;\n      return { messages: state.values.messages };\n    },\n  });\n  return (\n    <Modal\n      assistantAvatar={{\n        src: \"/usr.png\",\n        alt: \"AI Assistant\",\n        fallback: \"AI\"\n      }}\n      runtime={runtime}\n    />\n  );\n};\n\nexport function MyAssistant() {\n  const threadIdRef = useRef<string | undefined>();\n  const runtime = useLangGraphRuntime({\n    threadId: threadIdRef.current,\n    stream: async (messages) => {\n      if (!threadIdRef.current) {\n        const { thread_id } = await createThread();\n        threadIdRef.current = thread_id;\n      }\n      const threadId = threadIdRef.current;\n      return sendMessage({\n        threadId,\n        messages,\n      });\n    },\n    onSwitchToNewThread: async () => {\n      const { thread_id } = await createThread();\n      threadIdRef.current = thread_id;\n    },\n    onSwitchToThread: async (threadId) => {\n      const state = await getThreadState(threadId);\n      threadIdRef.current = threadId;\n      return { messages: state.values.messages };\n    },\n  });\n\n  return (\n    <Thread\n      runtime={runtime}\n      assistantMessage={{ components: { Text: MarkdownText } }}\n    />\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}